primerdt$primer <- paste0("P_", unlist(lapply(strsplit(primerdt$primer, "_", fixed= T), "[", 2)))
# gene_S$label
d=data.frame(x1=(gene_S$start*3)-1, x2=(gene_S$end*3)-1,
y1=c(-1,-1,-1,-1,-1,-1,
-1.4,-2.0,-2.6,-1.4,-1.4,-2.0,-2.6 ),
y2=c(-0.2,-0.2,-0.2,-0.7,-0.7,-0.2,
-1.4,-2.0,-2.6,-1.4,-1.4,-2.0,-2.6 ),
t=gene_S$track,
r=gene_S$label, stringsAsFactors = F)
dsite <- d[7:13,]
ssites$y1 <- c(rep(-1.3,10),rep(-1.9,15),rep(-2.5,9),rep(-1.3,4),rep(-1.3,4),-1.9,-2.5)
ssites$y2 <- c(rep(-1.5,10),rep(-2.1,15),rep(-2.7,9),rep(-1.5,4),rep(-1.5,4),-2.1,-2.7)
dsite
# gene_S$label
d=data.frame(x1=(gene_S$start*3)-1, x2=(gene_S$end*3)-1,
y1=c(-1,-1,-1,-1,-1,-1,
-1.4,-2.0,-2.6,-1.4,-1.4,-2.0,-2.6 ),
y2=c(-0.2,-0.2,-0.2,-0.7,-0.7,-0.2,
-1.4,-2.0,-2.6,-1.4,-1.4,-2.0,-2.6 ),
t=gene_S$track,
r=gene_S$label, stringsAsFactors = F)
dsite <- d[7:13,]
View(dsite)
View(d)
TAGR <- paste0(place, " " , unique(fi$runid))
if(!dir.exists(paste0(xpath, "/reports/plots/lollipop/gene_S/"))){
dir.create(paste0(xpath, "/reports/plots/lollipop"))
dir.create(paste0(xpath, "/reports/plots/lollipop/gene_S"))
}
# Control por si hay NA paara que devuelva T o F en la condición dim(selmuts)[1]>0 && selmuts$lineage != "None"
smuts$lineage[is.na(smuts$lineage)] <- "None"
j=1
# j=1
COV=smuts$ID[j]
COV
SHOS=smuts$Hospital.sample.number[j]
SHOS
View(qcm3x)
#
# for(i in 1:length(filesmuts)){
#   muts <- read.table(paste0("../210916_getMuts_extra_lineage/output/", filesmuts[i]), sep = "\t", stringsAsFactors = F, header = T)
#   muts <- muts[muts$runid != "",]
#   if(i == 1){
#     smuts <- muts
#   }else{
#     smuts <- rbind(smuts, muts)
#   }
# }
smuts <- qcm3x
sars <- data.frame(gene=c("five_prime_UTR", "ORF1a", "ORF1b", "gene_S", "ORF3a", "gene_E", "gene_M", "ORF6", "ORF7a", "ORF7b", "ORF8", "gene_N", "ORF10", "three_prime_UTR"),
start=c(1, 266, 13471, 21563, 25393, 26245, 26523, 27202, 27394, 27756, 27894, 28274, 29558, 29675),
end=c(265, 13465, 21552, 25384, 26220, 26472, 27191, 27387, 27759, 27887, 28259, 29533, 29674, 29903),
color=c("#dfdbda", "#a1c5de", "#dbe5f3", "#f6cea8", "#efb8ba", "#d4ecf2", "#b9d5b6", "#f4e5b3", "#d0bee2", "#fbd4d9", "#cdb7b4", "#b7b7b8", "#e0e1a4", "#dfdbda" ),
stringsAsFactors = F)
is.nan.data.frame <- function(x)
do.call(cbind, lapply(x, is.nan))
is.infinite.data.frame <- function(x)
do.call(cbind, lapply(x, is.infinite))
# Control por si hay NA paara que devuelva T o F en la condición dim(selmuts)[1]>0 && selmuts$lineage != "None"
smuts$lineage[is.na(smuts$lineage)] <- "None"
COV=smuts$ID[j]
SHOS=smuts$Hospital.sample.number[j]
xpath
depth <- read.table(paste0(xpath, "/reports/mosdept/", COV, ".regions.bed.gz"), sep = "\t", header = F, col.names = c("reference", "position0", "position", "reads"), stringsAsFactors = F)
depth <- read.table(paste0(xpath, "/reports/mosdept/", COV, "_", SHOS, ".regions.bed.gz"), sep = "\t", header = F, col.names = c("reference", "position0", "position", "reads"), stringsAsFactors = F)
paste0(xpath, "/reports/mosdept/", COV, "_", SHOS, ".regions.bed.gz")
depth <- read.table(paste0(xpath, "/reports/mosdepth/", COV, "_", SHOS, ".regions.bed.gz"), sep = "\t", header = F, col.names = c("reference", "position0", "position", "reads"), stringsAsFactors = F)
View(depth)
View(depth)
depth$position0 <- NULL
depth$sample <- COV
# READS TO LOG2
depth$reads <- log(depth$reads, 2)
depth[is.nan(depth)] <- 0
depth[is.infinite(depth)] <- 0
# Sacamos información de ese COV
# seldb <- db[db$ID %in% COV, ]
selmuts <- smuts[smuts$ID %in% COV,]
dim(selmuts)[1]>0 && selmuts$lineage != "None"
selmuts$S_match != "" & selmuts$`lineage+mutations` != ""
titulo <- paste0(COV, " _ ", SHOS, "\n(", selmuts$Status, " | cov:", round(selmuts$Coverage*100, digits = 2),"%, depth:", selmuts$Median.depth, ") \nMatch muts gene_S: ", selmuts$S_match, "\n", selmuts$lineage)  #`lineage+mutations` )
titulo
paste0(COV, " _ ", SHOS, "\n(", selmuts$Status, " | cov:", round(selmuts$Coverage*100, digits = 2),"%, depth:", selmuts$Median.depth, ") \n", selmuts$lineage)
dtmut <- data.frame(muts= unique(c(unlist(strsplit(selmuts$S_sample, ", ")), unlist(strsplit(selmuts$S_reference, ", ")))), stringsAsFactors = F)
dtmut
View(dtmut)
dim(dtmut)[1]
# pongo -1 para centrar mutación
dtmut$pos <- (parse_number(dtmut$muts)*3)-1
dtmut <- dtmut[order(dtmut$pos, decreasing = F),]
# Las que está en referencia ponemos nivel 0.5 y color gris
dtmut$y[dtmut$muts %in% unlist(strsplit(selmuts$S_reference, ", "))] <- 0.5
dtmut$color[dtmut$muts %in% unlist(strsplit(selmuts$S_reference, ", "))] <- "#bdbfb8"
# Las que está en sample ponemos nivel 0.5 y color rojo
dtmut$y[dtmut$muts %in% unlist(strsplit(selmuts$S_sample, ", "))] <- 1
dtmut$color[dtmut$muts %in% unlist(strsplit(selmuts$S_sample, ", "))] <- "#e04343"
# ponemos a todas nivel extra y color fucsia
dtmut$y[!dtmut$muts %in% unlist(strsplit(selmuts$S_reference, ", ")) & dtmut$muts %in% unlist(strsplit(selmuts$S_sample, ", "))] <- 1.5
dtmut$color[!dtmut$muts %in% unlist(strsplit(selmuts$S_reference, ", ")) & dtmut$muts %in% unlist(strsplit(selmuts$S_sample, ", "))]  = "#9921c4"
### Plot
# En base al máximo de lecturas log 2, hago que vaya alternando valores primers
primerdt_gene_s_segment$y <- c(rbind(rep(max(depth$reads)+0.5, 7), rep(max(depth$reads)+1, 7)))
primerdt_gene_s$y <- c(rbind(rep(max(depth$reads)+0.7, 7), rep(max(depth$reads)+1.2, 7)))
#######################################
# sacamos zonas aa missing
vectnu <- unlist(gregexpr("X", df$sequence[df$ID == COV]))
vectnu
any(vectnu != -1
)
missinter <- as.data.frame(reduce(IRanges(vectnu)))
missinter
View(missinter)
View(primerdt_gene_s_segment)
View(primerdt_gene_s)
View(primerdt_gene_s_segment)
View(primerdt_gene_s)
View(primerdt_gene_s_segment)
View(primerdt_gene_s)
View(primers)
View(primerdt_gene_s_segment)
View(primerdt_gene_s_segment)
View(primerdt_gene_s)
View(primerdt_gene_s_segment)
### Plot
# En base al máximo de lecturas log 2, hago que vaya alternando valores primers
primerdt$y <- c(rbind(rep(max(depth$reads)+0.5, 7), rep(max(depth$reads)+1, 7)))
primerdt$y <- c(rbind(rep(max(depth$reads)+0.7, 7), rep(max(depth$reads)+1.2, 7)))
### Plot
# En base al máximo de lecturas log 2, hago que vaya alternando valores primers
dim(primerdt)[1]
### Plot
# En base al máximo de lecturas log 2, hago que vaya alternando valores primers
dim(primerdt)[1]/2
### Plot
# En base al máximo de lecturas log 2, hago que vaya alternando valores primers
ceiling(dim(primerdt)[1]/2)
floor(dim(primerdt)[1]/2)
### Plot
# En base al máximo de lecturas log 2, hago que vaya alternando valores primers
ceiling(100/2)
floor(100/2)
primerdt$y <- c(rbind(rep(max(depth$reads)+0.5, ceiling(dim(primerdt)[1]/2)), rep(max(depth$reads)+1, floor(dim(primerdt)[1]/2))))
rep(max(depth$reads)+0.5, ceiling(dim(primerdt)[1]/2))
rep(max(depth$reads)+1, floor(dim(primerdt)[1]/2))
c(rbind(rep(max(depth$reads)+0.5, ceiling(dim(primerdt)[1]/2)), rep(max(depth$reads)+1, floor(dim(primerdt)[1]/2))))
c(rbind(rep(max(depth$reads)+0.7, 7), rep(max(depth$reads)+1.2, 7)))
ceiling(dim(primerdt)[1]/2
#######################################
# sacamos zonas aa missing
vectnu <- unlist(gregexpr("X", df$sequence[df$ID == COV]))
ceiling(dim(primerdt)[1]/2)
c(rbind(rep(max(depth$reads)+0.7, ceiling(dim(primerdt)[1]/2)), rep(max(depth$reads)+1.2, floor(dim(primerdt)[1]/2))))
rep(max(depth$reads)+0.7, ceiling(dim(primerdt)[1]/2)
)
rep(max(depth$reads)+1.2, floor(dim(primerdt)[1]/2)))
rep(max(depth$reads)+1.2, floor(dim(primerdt)[1]/2)))
rep(max(depth$reads)+1.2, floor(dim(primerdt)[1]/2))
rep(max(depth$reads)+1.2, floor(dim(primerdt)[1]/2))
rep(max(depth$reads)+0.7, ceiling(dim(primerdt)[1]/2))
c(rbind(rep(max(depth$reads)+0.7, ceiling(dim(primerdt)[1]/2)),
rep(max(depth$reads)+1.2, floor(dim(primerdt)[1]/2))
)
)
length(c(rbind(rep(max(depth$reads)+0.7, ceiling(dim(primerdt)[1]/2)),
rep(max(depth$reads)+1.2, floor(dim(primerdt)[1]/2))
)
))
length(rep(max(depth$reads)+0.7, ceiling(dim(primerdt)[1]/2)))
length(rep(max(depth$reads)+0.7, floor(dim(primerdt)[1]/2)))
length(c(rbind(rep(max(depth$reads)+0.7, ceiling(dim(primerdt)[1]/2)),
rep(max(depth$reads)+1.2, floor(dim(primerdt)[1]/2))
)
))
length(c(rep(max(depth$reads)+0.7, ceiling(dim(primerdt)[1]/2)),
rep(max(depth$reads)+1.2, floor(dim(primerdt)[1]/2))
))
rep(max(depth$reads)+0.7, floor(dim(primerdt)[1]/2))
xxx <- c(rbind(rep(max(depth$reads)+0.7, ceiling(dim(primerdt)[1]/2)),
rep(max(depth$reads)+1.2, floor(dim(primerdt)[1]/2))
)
)
data.frame(as.table(xxx))
xdt <- data.frame(as.table(xxx))
View(xdt)
xxx
xdt <- data.frame(as.table(xxx))
xdt
sum(xxx == 11.77012)
xxx
sum(xxx %in% 11.77012)
sum(xxx %in% "11.77012")
sum(as.numeric(xxx) == 11.77012)
sum(round(xxx, digits = 5) == 11.77012)
sum(round(xxx, digits = 5) == 12.27012)
vector1 <- rep(max(depth$reads)+0.5, ceiling(dim(primerdt)[1]/2))
vector2 <- rep(max(depth$reads)+0.5, floor(dim(primerdt)[1]/2))
vector12_intercalado <- c(sapply(seq_along(a), function(i) append(vector1[i], vector2[i], i)))
vector12_intercalado <- c(sapply(seq_along(vector1), function(i) append(vector1[i], vector2[i], i)))
vector12_intercalado
vector1 <- rep(max(depth$reads)+0.5, ceiling(dim(primerdt)[1]/2))
vector2 <- rep(max(depth$reads)+0.5, floor(dim(primerdt)[1]/2))
vector12_intercalado <- c(sapply(seq_along(vector1), function(i) append(vector1[i], vector2[i], i)))
vector12_intercalado
seq_along(vector1)
append(vector1[i], vector2[i], i)
vector12_intercalado <- c(vector1, vector2)[order(c(seq_along(vector1)*2 - 1, seq_along(vector1)*2))]
vector12_intercalado
order(c(seq_along(vector1)*2 - 1, seq_along(vector1)*2))
c(vector1, vector2)
rep(max(depth$reads)+0.5, ceiling(dim(primerdt)[1]/2))
rep(max(depth$reads)+0.5, floor(dim(primerdt)[1]/2))
vector1 <- rep(max(depth$reads)+0.7, ceiling(dim(primerdt)[1]/2))
vector2 <- rep(max(depth$reads)+1.2, floor(dim(primerdt)[1]/2))
vector12_intercalado <- c(vector1, vector2)[order(c(seq_along(vector1)*2 - 1, seq_along(vector1)*2))]
vector12_intercalado
vector12_intercalado <- vector12_intercalado[!is.na(vector12_intercalado)]
primerdt$y <- vector12_intercalado
View(primerdt)
#######################################
# sacamos zonas aa missing
vectnu <- unlist(gregexpr("X", df$sequence[df$ID == COV]))
missinter <- as.data.frame(reduce(IRanges(vectnu)))
missinter$start <- missinter$start*3
missinter$end <- missinter$end*3
any(vectnu != -1)
max(sars$end)
seq(1,29903,500)
c(seq(1,29903,500), 29903)
ggplot() +
scale_x_continuous(name="Position (nt)", breaks = c(seq(1,29903,500), 29903)) +
scale_y_continuous(name="Log2(reads)", breaks = seq(0, ceiling(max(depth$reads)), by = 1))
gg1 <- ggplot() +
scale_x_continuous(name="Position (nt)", breaks = c(seq(1,29903,500), 29903)) +
scale_y_continuous(name="Log2(reads)", breaks = seq(0, ceiling(max(depth$reads)), by = 1))
gg1
# Libraries
# install.packages("RMySQL")
library("readxl")  # Para poder leer excell plantilla y de Xavier
library("stringr") # Para cambiar capitalización texto
library("RMySQL")  # Para consultar la base de datos las muestras que nos llegan
# FUNCION SACAR BASE DE DATOS ACTUAL
getDBcovid <- function(){
library(RMySQL)
# ELiminar conexiones anteriores
lapply(dbListConnections(MySQL()), dbDisconnect)
# 2. Settings
#-----------------------------------------------------------------------------
db_user <- 'coviremoto'
db_password <- 'coro22sel.vid'
db_name <- 'hospital_samples'
db_table <- 'sample'
# db_host <- '127.0.0.1' # for local access
db_host <- '10.192.231.160'
db_port <- 3306
# 3. Read data from db
#-----------------------------------------------------------------------------
mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
s <- paste0("SELECT id,hosp_code,name FROM hospital;")
rs <- dbSendQuery(mydb, s)
# remote_sample <- dbFetch(rs)
remote_hosp <-  fetch(rs, n = -1)
colnames(remote_hosp)[1] <- "hospital_id"
dbClearResult(rs)
on.exit(dbDisconnect(mydb))
mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
s <- paste0("SELECT gid,sip,hospital_id,hospital_sample_number,hospital_date,shipment_shipping_code FROM ", db_table)
rs <- dbSendQuery(mydb, s)
# remote_sample <- dbFetch(rs)
remote_sample <-  fetch(rs, n = -1)
on.exit(dbDisconnect(mydb))
remote_sample <- merge(remote_sample, remote_hosp, by = "hospital_id")
remote_sample$hospital_id <- NULL
# remote_sample$diff <- remote_sample$id - remote_sample$gid
# Ponemos nombre COV completo
fun <- function(x) {
paste0("COV", paste0(rep(0, 6-nchar(x)), collapse = ""),x)
}
remote_sample$gid <- unlist(lapply(remote_sample$gid, fun))
remote_sample$hospital_date <- format(strptime(as.character(remote_sample$hospital_date), "%Y-%m-%d"), "%Y-%m-%d")
return(remote_sample)
}
getDBcovidSumm <- function(){
#library(RMySQL)
# Eliminate possible previous connections
lapply(dbListConnections(MySQL()), dbDisconnect)
# 2. Settings
#-----------------------------------------------------------------------------
db_user <- 'coviremoto'
db_password <- 'coro22sel.vid'
db_name <- 'hospital_samples'
db_table <- 'sample'
# db_host <- '127.0.0.1' # for local access
db_host <- '10.192.231.160'
db_port <- 3306
# 3. Read data from db
#-----------------------------------------------------------------------------
# GET HOSPITAL INFO
mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
s <- paste0("SELECT id,hosp_code,name FROM hospital;")
rs <- dbSendQuery(mydb, s)
remote_hosp <-  fetch(rs, n = -1)
colnames(remote_hosp)[1] <- "hospital_id"
dbClearResult(rs)
on.exit(dbDisconnect(mydb))
# GET SAMPLE INFO
mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
s <- paste0("SELECT gid,hospital_sample_number,sip,hospital_id,reception_date,hospital_date,relevance,comments,gender,age,shipment_shipping_code,pcr_concentration FROM ", db_table)
rs <- dbSendQuery(mydb, s)
remote_sample <-  fetch(rs, n = -1)
on.exit(dbDisconnect(mydb))
# MERGE HOSPITAL & SAMPLE INFO
remote_sample <- merge(remote_sample, remote_hosp, by = "hospital_id")
remote_sample$hospital_id <- NULL
# BUILD COV ID BY INT VALUES
fun <- function(x) {
paste0("COV", paste0(rep(0, 6-nchar(x)), collapse = ""),x)
}
remote_sample$gid <- unlist(lapply(remote_sample$gid, fun))
remote_sample$hospital_date <- format(strptime(as.character(remote_sample$hospital_date), "%Y-%m-%d"), "%Y-%m-%d")
return(remote_sample)
}
# Comprobación diferencia tiempo entre muestra
DDAYS = 5
E="CVA_GRAL_230512_S041_E1235"
PLATFORM="illumina"
install.packages("yaml")
install.packages("yaml")
options(htmltools.dir.version = FALSE)
library(knitr)
library(tidyverse)
library(tidyverse)
library(fontawesome)
library(emo)
library(xaringanExtra)
list.of.packages <- c("knitr", "tidyverse", "fontawesome", "emo", "xaringanExtra")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
devtools::install_github("hadley/emo")
installed.packages()
list.devtools <- c("emo")
"emo" %in% installed.packages()[,"Package"]
# Instalación
list.of.packages <- c("knitr", "tidyverse", "fontawesome", "xaringanExtra", "devtools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
if(!"emo" %in% installed.packages()[,"Package"]) devtools::install_github("hadley/emo")
library(knitr)
library(tidyverse)
library(fontawesome)
library(emo)
library(xaringanExtra)
setwd("/ALMEIDA/PROJECTS/BACTERIAS/DGSP/DGSPefsa/scripts")
suppressPackageStartupMessages(require(ReportingTools))
FILES=dir("RECOPILACIÓN_RESULTADOS/")
# i=1
DATE_RES=unlist(strsplit(FILES[i], "_summary_"))[1]
i=1
FILES=FILES[grepl(FILES,"_summary_")]
FILES=dir("RECOPILACIÓN_RESULTADOS/")
FILES[grepl(FILES,"_summary_")]
FILES=FILES[grepl("_summary_", FILES)]
# i=1
DATE_RES=unlist(strsplit(FILES[i], "_summary_"))[1]
RUN=gsub(".csv", "", unlist(strsplit(FILES[i], "_summary_"))[2])
INPUT_PATH="RECOPILACIÓN_RESULTADOS/"
FILES=dir(INPUT_PATH)
data <- read.table(paste0(INPUT_PATH, FILES[i]),
sep = ",",
dec = ".",
quote = "\"",
header = T,
check.names = F,
stringsAsFactors = F)
for(i in 1:length(FILES)){
# i=1
DATE_RES=unlist(strsplit(FILES[i], "_summary_"))[1]
RUN=gsub(".csv", "", unlist(strsplit(FILES[i], "_summary_"))[2])
data <- read.table(paste0(INPUT_PATH, FILES[i]),
sep = ",",
dec = ".",
quote = "\"",
header = T,
check.names = F,
stringsAsFactors = F)
}
data$Run <- RUN
data <- read.table(paste0(INPUT_PATH, FILES[i]),
sep = ",",
dec = ".",
quote = "\"",
header = T,
check.names = F,
stringsAsFactors = F)
paste0(INPUT_PATH, FILES[i])
read.table(paste0(INPUT_PATH, FILES[i]),
sep = ",",
dec = ".",
quote = "\"",
header = T,
check.names = F,
stringsAsFactors = F)
data <- read.table(paste0(INPUT_PATH, FILES[i]),
sep = ",",
dec = ".",
quote = "\"",
header = T,
check.names = F,
stringsAsFactors = F)
# i=1
DATE_RES=unlist(strsplit(FILES[i], "_summary_"))[1]
RUN=gsub(".csv", "", unlist(strsplit(FILES[i], "_summary_"))[2])
data <- read.table(paste0(INPUT_PATH, FILES[i]),
sep = ",",
dec = ".",
quote = "\"",
header = T,
check.names = F,
stringsAsFactors = F)
datar <- data[,c("Run", "Sample", "Sp_detected", "Cov_Q30", "Completeness", "Contamination", "contigs", "N50_(contigs)",
"ST", "MLST", "Antigenic_profile", "ST_patho", "cgmlst_ST", "Resistance_genes", "Antimicrobial(class)"
,"Gene_mut(resistance)", "Status_Q30", "Status_SP", "Status_SNV", "Status_Contamination", "Assembly_quality" )]
data$Run <- RUN
datar <- data[,c("Run", "Sample", "Sp_detected", "Cov_Q30", "Completeness", "Contamination", "contigs", "N50_(contigs)",
"ST", "MLST", "Antigenic_profile", "ST_patho", "cgmlst_ST", "Resistance_genes", "Antimicrobial(class)"
,"Gene_mut(resistance)", "Status_Q30", "Status_SP", "Status_SNV", "Status_Contamination", "Assembly_quality" )]
INPUT_PATH="RECOPILACIÓN_RESULTADOS/"
FILES=dir(INPUT_PATH)
FILES=FILES[grepl("_summary_", FILES)]
if(length(FILES)>1){
for(i in 1:length(FILES)){
# i=1
DATE_RES=unlist(strsplit(FILES[i], "_summary_"))[1]
RUN=gsub(".csv", "", unlist(strsplit(FILES[i], "_summary_"))[2])
data <- read.table(paste0(INPUT_PATH, FILES[i]),
sep = ",",
dec = ".",
quote = "\"",
header = T,
check.names = F,
stringsAsFactors = F)
data$Run <- RUN
datar <- data[,c("Run", "Sample", "Sp_detected", "Cov_Q30", "Completeness", "Contamination", "contigs", "N50_(contigs)",
"ST", "MLST", "Antigenic_profile", "ST_patho", "cgmlst_ST", "Resistance_genes", "Antimicrobial(class)"
,"Gene_mut(resistance)", "Status_Q30", "Status_SP", "Status_SNV", "Status_Contamination", "Assembly_quality" )]
if(i == 1){
sdata <- datar
}else{
sdata <- rbind(sdata, datar)
}
}
}else{
"NO 'SUMMARIES' FOUND!"
}
INPUT_PATH="RECOPILACIÓN_RESULTADOS/"
FILES=dir(INPUT_PATH)
FILES=FILES[grepl("_summary_", FILES)]
if(length(FILES)>1){
DIROUT <- dirname(FILES[1])
for(i in 1:length(FILES)){
# i=1
DATE_RES=unlist(strsplit(FILES[i], "_summary_"))[1]
RUN=gsub(".csv", "", unlist(strsplit(FILES[i], "_summary_"))[2])
data <- read.table(paste0(INPUT_PATH, FILES[i]),
sep = ",",
dec = ".",
quote = "\"",
header = T,
check.names = F,
stringsAsFactors = F)
data$Run <- RUN
data$Date_results <- DATE_RES
datar <- data[,c("Run", "Sample", "Sp_detected", "Cov_Q30", "Completeness", "Contamination", "contigs", "N50_(contigs)",
"ST", "MLST", "Antigenic_profile", "ST_patho", "cgmlst_ST", "Resistance_genes", "Antimicrobial(class)"
,"Gene_mut(resistance)", "Status_Q30", "Status_SP", "Status_SNV", "Status_Contamination", "Assembly_quality",
"Date_results")]
if(i == 1){
sdata <- datar
}else{
sdata <- rbind(sdata, datar)
}
}
}else{
"NO 'SUMMARIES' FOUND!"
}
DATE=format(Sys.time(), '%d %B, %Y')
DATE
DATE=format(Sys.time(), '%d %B, %y%m%d')
DATE
DATE=format(Sys.time(), '%y%m%d')
DATE=format(Sys.time(), '%y%m%d')
des2Report <- HTMLReport(shortName = paste0(DATE, '_DGSP.html'),
title = paste0('RESULTADOS ANÁLISIS DGSP (última actualización ', format(Sys.time(), '%d %B, %Y'), ")"),
reportDirectory = DIROUT)
publish(sdata,
reportDir=DIROUT)
DITOUT_HTML <- paste0(DIROUT, "/reportHTML")
if(!file.exists(DITOUT_HTML)) {
dir.create(DITOUT_HTML)
}
des2Report <- HTMLReport(shortName = paste0(DATE, '_DGSP.html'),
title = paste0('RESULTADOS ANÁLISIS DGSP EFSA  <br> (última actualización ', format(Sys.time(), '%d %B, %Y'), ")"),
reportDirectory = DITOUT_HTML)
publish(sdata, htmlRep)
htmlRep <- HTMLReport(shortName = paste0(DATE, '_DGSP.html'),
title = paste0('RESULTADOS ANÁLISIS DGSP EFSA  <br> (última actualización ', format(Sys.time(), '%d %B, %Y'), ")"),
reportDirectory = DITOUT_HTML)
publish(sdata, htmlRep)
finish(htmlRep)
